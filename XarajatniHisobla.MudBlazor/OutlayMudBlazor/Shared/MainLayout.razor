@using System.Net;
@using Newtonsoft.Json;
@using OutlayMudBlazor.Dtoes;
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@using OutlayMudBlazor.Services;
@inject AccountService accountService
@inject DebtService debtService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<style>
    .background-image {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background-image: url('../img/pic1.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
    }

    .drawer-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('../img/pic2.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        z-index: -1;
    }
</style>

<MudLayout>

    <MudAppBar Elevation="0">


        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Default" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        @if (errorMessage is not null || errorMessage2 is not null)
        {
            <h1> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;@(errorMessage ?? errorMessage2)</h1>
        }
        <MudSpacer />

       

        @if(doesShowNotification)
        {
            <MudIconButton OnClick="(() => GoToGetMotificationDebts())" Icon="@Icons.Material.TwoTone.NotificationsActive" Size="Size.Large" Color="Color.Default" />

            <h1>&nbsp;&nbsp;</h1>

        }


        @if(isHave)
        {
            <MudMenu>

                <ActivatorContent>
                    @if (imageSrc is not null)
                    {
                        <MudAvatar  Image="@imageSrc" />
                    }
                    else
                    {
                        @if (userName is not null)
                        {
                            <MudAvatar Color="Color.Info">@userName[0]</MudAvatar>
                        }
 
                    }
                </ActivatorContent>
                <ChildContent >
                    <div class="drawer-background"></div>
                    <MudMenuItem Icon="@Icons.Material.Filled.Person" OnClick="@(async () => await Account())">Profil</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Outlined.Logout" OnClick="@(async () => await SignOut())">Chiqish</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
          <div class="drawer-background"></div>
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Xarajat</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            <div class="background-image"></div>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    string? userName;
    bool _drawerOpen = true;
    string? errorMessage;
    string? errorMessage2;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    bool isHave = false;
    string? imageSrc;

    List<Debts>? Elements = new List<Debts>();
    bool doesShowNotification;

    protected override async Task OnInitializedAsync()
    {
         var result = await accountService.GetAccountAsync();

        if (result.IsSuccess)
        {
             isHave = true;

            var userVM = result.Data;

            userName = userVM?.Name;

            if (userVM?.Bytes is not null)
            {
                var base64 = Convert.ToBase64String(userVM.Bytes);
                imageSrc = string.Format("data:image/png;base64,{0}", base64);
            }
            else
                imageSrc = null;
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }

        if(isHave)
        {

            var result2 = await debtService.GetDebtsAsync();

            if (result2.IsSuccess)
            {
                Elements = result2.Data;
                var elements = Elements.Where(x => x.DebtType == EDebtType.Created || x.DebtType == EDebtType.Accepted && x.DeleteSenderName != null || x.DebtType == EDebtType.Rejected && x.SenderName.ToLower() == userName.ToLower()).ToList();

                if (elements.Count() > 0)
                {
                    doesShowNotification = true;
                }
                else
                {
                    doesShowNotification = false;
                }
            }
            else
            {
                errorMessage2 = result2.ErrorMessage;
            }

        }
    }

    private async Task Account()
    {
        NavManager.NavigateTo("/profil");
    }

    private async Task SignOut()
    {
         var result = await accountService.LogOutAsync();

        if (result.IsSuccess)
        {
            NavManager.NavigateTo("/signin", true);
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }

    }

    private void GoToGetMotificationDebts()
    {
        NavManager.NavigateTo($"/XabarnomalarniKo'rish");
    }
}
