@page "/ShaxsiyMalumotlarniO'zgartirish"
@using FluentValidation
@using OutlayMudBlazor.Dtoes;
@inject NavigationManager NavManager
@using OutlayMudBlazor.Services;
@inject AccountService accountService

<div style="display: flex; justify-content: center;">
    <div style="width: 433px;">
        <MudCard style="background-color:floralwhite;">
            <MudForm Model="@model" @ref="@form" Validation="@(updateAccountDtoValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>

                    @if (errorMessage is not null)
                    {
                        <div style="display: flex; justify-content: center;">
                            <MudAlert Severity="MudBlazor.Severity.Error">@errorMessage</MudAlert>
                        </div>
                    }

                    <MudTextField @bind-Value="model.Username"
                                  For="@(() => model.Username)"
                                  Immediate="true"
                                  Label="Ism" />


                    <MudTextField @bind-Value="model.Password"
                                  For="@(() => model.Password)"
                                  Immediate="true"
                                  Label="Parol" InputType="InputType.Password" />

                    <MudTextField @bind-Value="model.ConfirmPassword"
                                  For="@(() => model.ConfirmPassword)"
                                  Immediate="true"
                                  Label="Parolni takrorlang" InputType="InputType.Password" />

                </MudCardContent>
            </MudForm>
            <div style="display: flex; justify-content: center;">
                <MudCardActions>
                             <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await ChangeAccount())">Shaxsiy Malumotlarni O'zgartirish</MudButton>
                </MudCardActions>
            </div>

            <br />
        </MudCard>
    </div>
</div>




@code {
    string? errorMessage;
    MudForm? form;

    UpdateAccountDtoFluentValidator updateAccountDtoValidator = new UpdateAccountDtoFluentValidator();
    UpdateAccount model = new UpdateAccount();

    private async Task ChangeAccount()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var result = await accountService.UpdateAccountAsync(model);

            if (result.IsSuccess)
            {
                NavManager.NavigateTo("/profil");
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
    }


    public class UpdateAccountDtoFluentValidator : AbstractValidator<UpdateAccount>
    {
        public UpdateAccountDtoFluentValidator()
        {
            RuleFor(x => x.Username)
                 .NotEmpty().WithMessage("Ismingizni kiriting")
                 .Length(4, 20).WithMessage("Ism kamida 4 va ko'pi bilan 20 belgidan iborat bo'lishi kerak");

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Parolni kiriting")
                .Length(6, 30).WithMessage("Parol kamida 6 va ko'pi bilan 30 belgidan iborat bo'lishi kerak");


            RuleFor(x => x.ConfirmPassword)
                .NotEmpty().WithMessage("Parolni kiriting")
                .Length(6, 30).WithMessage("Parol kamida 6 va ko'pi bilan 30 belgidan iborat bo'lishi kerak")
                .Equal(x => x.Password).WithMessage("Parol oldingi parol bilan mos kelmadi"); 
        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UpdateAccount>.CreateWithOptions((UpdateAccount)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}