@page "/KategoriyaniO'zgartirish/{kategoriyaId}/{type}"
@using FluentValidation
@using Newtonsoft.Json;
@using OutlayMudBlazor.Dtoes;
@using System.Net;
@using System.Text;
@using OutlayMudBlazor.Services;
@inject NavigationManager NavManager
@inject CategoryService categoryService
@inject IConfiguration configuration

@if(IsNotFound)
{
    <div style="text-align: center;">
        <h1>Bunday kategoriya topilmadi</h1>

    </div>
}
else
{
    <div style="display: flex; justify-content: center;">
        <div style="width: 433px;">
            <MudCard style="background-color:floralwhite;">
                <MudForm Model="@model" @ref="@form" Validation="@(updateCategoryValidator.ValidateValue)" ValidationDelay="0">
                    <MudCardContent>

                        @if (errorMessage is not null)
                        {
                            <div style="display: flex; justify-content: center;">
                                <MudAlert Severity="MudBlazor.Severity.Error">@errorMessage</MudAlert>
                            </div>
                        }

                        <MudTextField @bind-Value="model.Name"
                                  For="@(() => model.Name)"
                                  Immediate="true"
                                  Label="Nom" />

                        <MudTextField @bind-Value="model.Description"
                                  For="@(() => model.Description)"
                                  Immediate="true"
                                  Label="Qo'shimcha malumot" />

                        @if (type is "Public")
                        {
                            <MudTextField @bind-Value="model.Key"
                                  For="@(() => model.Key)"
                                  Immediate="true"
                                  Label="Parol" />
                        }

                    </MudCardContent>
                </MudForm>
                <div style="display: flex; justify-content: center;">
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await ChangeCategory())">Kategoriyani O'zgartirish</MudButton>
                    </MudCardActions>
                </div>

                <br />
            </MudCard>
        </div>
    </div>
}






@code {
    string? errorMessage;
    string? errorDetails;
    MudForm? form;
    private bool IsNotFound;

    UpdateCategoryFluentValidator updateCategoryValidator = new UpdateCategoryFluentValidator();
    UpdateCategory model = new UpdateCategory();

    [Parameter]
    public string? kategoriyaId { get; set; }

    [Parameter]
    public string? type { get; set; }

    private async Task ChangeCategory()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (string.IsNullOrEmpty(model.Description))
                model.Description = null;

            var result = await categoryService.UpdateCategoryAsync(model, kategoriyaId);

            if (result.IsSuccess)
                NavManager.NavigateTo($"/Kategoriya/{kategoriyaId}");
            else
            {
                errorMessage = result.ErrorMessage;
                errorDetails = result.ErrorDetails;
                IsNotFound = result.IsNotFound;

                if (errorDetails is not null)
                    await SendTelegramMessage.SendTelegram(errorDetails, configuration);
            }
        }
    }


    public class UpdateCategoryFluentValidator : AbstractValidator<UpdateCategory>
    {
        public UpdateCategoryFluentValidator()
        {
            RuleFor(x => x.Name)
                 .NotEmpty().WithMessage("Nom kiriting")
                 .Length(3, 20).WithMessage("Nom kamida 3 va ko'pi bilan 20 belgidan iborat bo'lishi kerak");

            RuleFor(x => x.Description)
                  .Cascade(CascadeMode.StopOnFirstFailure)
                  .Must(ValidateDescription).WithMessage("Malumot kamida 3 va ko'pi bilan 20 belgidan iborat bo'lishi yoki bo'sh qoldirilishi kerak");

            RuleFor(x => x.Key)
                 .NotEmpty().WithMessage("Parolni kiriting")
                 .Length(4, 30).WithMessage("Parol kamida 4 va ko'pi bilan 30 belgidan iborat bo'lishi kerak");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await base.ValidateAsync(ValidationContext<UpdateCategory>.CreateWithOptions((UpdateCategory)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

        private bool ValidateDescription(string description)
        {
            if (string.IsNullOrWhiteSpace(description))
                return true;

            return description.Length >= 3 && description.Length <= 20;
        }
    }

}