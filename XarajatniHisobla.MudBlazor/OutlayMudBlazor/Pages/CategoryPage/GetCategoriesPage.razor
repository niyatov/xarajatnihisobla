@page "/Kategoriyalar"

@using FluentValidation
@using Newtonsoft.Json;
@using OutlayMudBlazor.Dtoes;
@inject NavigationManager NavManager
@using System.Net.Http.Json
@using System.Net;
@using System.Text;
@using OutlayMudBlazor.Services;
@inject CategoryService categoryService
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IConfiguration configuration

@if (errorMessage is not null)
{
    <div style="display: flex; justify-content: center;">
        <MudAlert Severity="MudBlazor.Severity.Error">@errorMessage</MudAlert>
    </div>
}
else if (Elements?.Count() is 0)
{
    <div style="text-align: center;">
        <h1>Kategoriyalar mavjud emas</h1>

    </div>
}
else
{
    <MudTable style="background-color:floralwhite;" Items="@Elements" Dense="@dense" Bordered="@bordered" Striped="@striped" Filter="new Func<Categories,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
          SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">

        <ToolBarContent>
            <MudText Typo="Typo.h6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kategoriyalar</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Qidirish" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <ColGroup>
            <col style="width: 1%;" />
            <col style="width: 28%;" />
            <col style="width: 29%;" />
            <col style="width: 13%;" />
            <col style="width: 13%;" />
            <col style="width: 16%;" />
        </ColGroup>

        <HeaderContent>

            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<Categories, object>(x=>x.Index)">Tartib raqami</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<Categories, object>(x=>x.Name)">Nom</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;">Qo'shimcha malumot</MudTh>
            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<Categories, object>(x=>x.IsAdmin)">Rol</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<Categories, object>(x=>x.NumberOfOutlays)">Xarajatlar soni</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<Categories, object>(x=>x.Type)">Turi</MudTableSortLabel></MudTh>

        </HeaderContent>
        <RowTemplate >
            <MudTd style="text-align: center;">@(context.Index)</MudTd>
                <MudTd> <MudButton OnClick="(() => GoToCategory(context.Id))" Variant="Variant.Text" Color="Color.Primary">&nbsp;&nbsp;&nbsp;&nbsp;@context.Name</MudButton> </MudTd>
                @if (context.Description is not null)
            {
                if (context.Description.Length > 40)
                {

                    <MudTd >&nbsp;&nbsp;&nbsp;&nbsp;@(context.Description.Substring(0, 37) + "...")</MudTd>
                }
                else
                {
                    <MudTd >&nbsp;&nbsp;&nbsp;&nbsp;@context.Description</MudTd>

                }
            }
            else
            {
                <MudTd>&nbsp;&nbsp;&nbsp;&nbsp;bo'sh</MudTd>
            }

            @if (context.IsAdmin is true)
            {
                <MudTd style="text-align: center;">admin</MudTd>
            }
            else
            {
                <MudTd style="text-align: center;">foydalanuvchi</MudTd>
            }
            <MudTd style="text-align: center;">@context.NumberOfOutlays</MudTd>
            @if (context.Type is "Private")
            {
                <MudTd style="text-align: center;">Shaxsiy</MudTd>
            }
            else
            {
                <MudTd style="text-align: center;">Ommaviy</MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Har bir sahifadagi qatorlar:"
                       FirstPageLabel="Birinchi sahifa"
                       LastPageLabel="So'nggi sahifa"
                       ItemsPerPageLabel="Qatorlar soni: "
                       PageLabel=" sahifa"
                       OfLabel=" dan" />

        </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Zich</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Success">Yo'l-yo'l</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Chegara</MudSwitch>
        <MudSpacer />
    </div>

}


@code {
    private bool dense = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Categories selectedItem1 = null;
    private HashSet<Categories> selectedItems = new HashSet<Categories>();
    string? errorMessage;
    string? errorDetails;

    private List<Categories>? Elements = new List<Categories>();

    protected override async Task OnInitializedAsync()
    {
        var result = await categoryService.GetCategoriesAsync();
        if (result.IsSuccess)
            Elements = result.Data;
        else
        {
            errorMessage = result.ErrorMessage;
            errorDetails = result.ErrorDetails;

            if(errorDetails is not null)
                await SendTelegramMessage.SendTelegram(errorDetails, configuration);
        }
    }


    private void GoToCategory(int kategoriyaId)
    {
        NavManager.NavigateTo($"/Kategoriya/{kategoriyaId}");
    }


    private bool FilterFunc1(Categories element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Categories element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if(element.Description is not null)
            if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        if (element.Type.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private bool blockSwitch = false;
    private List<string> editEvents = new();
    private Categories elementBeforeEdit;
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;



    public enum TableApplyButtonPosition
    {
        Start,
        End,
        StartAndEnd
    }

    public enum TableEditButtonPosition
    {
        Start,
        End,
        StartAndEnd
    }

    public enum TableEditTrigger
    {
        RowClick,
        EditButton
    }


        private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Index = ((Categories)element).Index,
                Name = ((Categories)element).Name,
                Description = ((Categories)element).Description,
                IsAdmin = ((Categories)element).IsAdmin,
                NumberOfOutlays = ((Categories)element).NumberOfOutlays,
                Type = ((Categories)element).Type,
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((Categories)element).Name}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((Categories)element).Name} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Categories)element).Index = elementBeforeEdit.Index;
        ((Categories)element).Name = elementBeforeEdit.Name;
        ((Categories)element).Description = elementBeforeEdit.Description;
        ((Categories)element).IsAdmin = elementBeforeEdit.IsAdmin;
        ((Categories)element).NumberOfOutlays = elementBeforeEdit.NumberOfOutlays;
        ((Categories)element).Type = elementBeforeEdit.Type;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((Categories)element).Name} canceled");
    }




}










