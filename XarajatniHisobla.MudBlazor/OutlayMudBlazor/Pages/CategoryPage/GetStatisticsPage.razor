@page "/StatistikaniKo'rish/{kategoriyaId}"

@using FluentValidation
@using Newtonsoft.Json;
@using OutlayMudBlazor.Dtoes;
@inject NavigationManager NavManager
@using System.Net.Http.Json
@using System.Net;
@using OutlayMudBlazor.Services;
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject CategoryService categoryService
@inject IConfiguration configuration

@if (errorMessage is not null)
{
    <div style="display: flex; justify-content: center;">
        <MudAlert Severity="MudBlazor.Severity.Error">@errorMessage</MudAlert>
    </div>
}
else if(IsNotFound)
{
    <div style="text-align: center;">
        <h1>Sahifa topilmadi</h1>

    </div>
}
else
{
    <div style="display: flex; justify-content: center;">
        <div style="width: 40%;">
            <MudCard style="background-color:powderblue;">
                <MudCardContent>
                    <MudText style="text-align: center;" Typo="Typo.h5">Malumotlar</MudText>
                    <br />

                    @if (!@Element.IsPrivate)
                    {
                        @if (@Element.IsAdmin is true)
                        {
                            <MudText Typo="Typo.body2"> Siz bu guruhda: &nbsp;&nbsp; <span style="color:black;">admin</span></MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2"> Siz bu guruhda: &nbsp;&nbsp; <span style="color:black;">foydalanuvchi</span></MudText>
                        }

                        <MudText Typo="Typo.body2">Foydalanuvchilar soni: &nbsp;&nbsp; <span style="color:black;">@Element?.NumberOfPeople</span></MudText>
                    }

                    <MudText Typo="Typo.body2"> Jami sarflagan mablag' miqdori:&nbsp;&nbsp; <span style="color:black;">@Element?.TotalSum</span></MudText>
                    <MudText Typo="Typo.body2">Jami xarajatlar soni: &nbsp;&nbsp; <span style="color:black;">@Element?.NumberOfOutlays</span></MudText>

                    @if (!@Element.IsPrivate)
                    {
                        <MudText Typo="Typo.body2"> Siz sarflagan mablag' miqdori:&nbsp;&nbsp; <span style="color:black;">@Element?.SpentMoney</span></MudText>
                        <MudText Typo="Typo.body2">Sizning xarajatlaringiz soni: &nbsp;&nbsp; <span style="color:black;">@Element?.NumberOfYourOutlays</span></MudText>

                    }

                    @if (Element.StartedAt is not null)
                    {
                        <MudText Typo="Typo.body2">Dastlabki xarajat qilingan sana: &nbsp;&nbsp; <span style="color:black;">@Element.StartedAt</span></MudText>
                        <MudText Typo="Typo.body2">Oxirgi xarajat qilingan sana: &nbsp;&nbsp; <span style="color:black;">@Element.FinishedAt</span></MudText>
                    }

                </MudCardContent>

                <MudCardActions style="display: flex; justify-content: flex-end;">
                    <div style="margin-right: auto;">
                        <MudIconButton OnClick="(() => BackToCategory())" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" />
                    </div>
                </MudCardActions>

            </MudCard>
        </div>
    </div>
    <br />
    <br />


    @if (!@Element.IsPrivate)
    {
        <MudTable style="background-color:floralwhite;" Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<UsersResult,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
               SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">

            <ToolBarContent>
                <MudText Typo="Typo.h6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statistika</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Qidirish" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>


            <ColGroup>
                <col style="width: 1%;" />
                <col style="width: 35%;" />
                <col style="width: 28%;" />
                <col style="width: 36%;" />
            </ColGroup>

            <HeaderContent>

                <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<UsersResult, object>(x=>x.Index)">Tartib raqami</MudTableSortLabel></MudTh>
                <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<UsersResult, object>(x=>x.UserName)">Nom</MudTableSortLabel></MudTh>
                <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<UsersResult, object>(x=>x.ResultMoney)">Pul miqdori</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;">Nima qilishi </MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd> &nbsp;&nbsp;  &nbsp;&nbsp; @context.Index</MudTd>
                <MudTd> &nbsp;&nbsp;  &nbsp;&nbsp; @context.UserName</MudTd>
                <MudTd style="text-align: center;">@(Math.Abs(context.ResultMoney))</MudTd>
                    @if (context.ResultMoney > 0)
                {
                    <MudTd style="text-align: center;"><span style="color:black;">&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;olishi kerak</span></MudTd>
                }
                else if (context.ResultMoney < 0)
                {
                    <MudTd style="text-align: center;"><span style="color:black;">&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;berishi kerak</span></MudTd>

                }
                else
                {
                    <MudTd><span style="color:black;">&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;hech narsa qilmaydi</span></MudTd>

                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager RowsPerPageString="Har bir sahifadagi qatorlar:"
                       FirstPageLabel="Birinchi sahifa"
                       LastPageLabel="So'nggi sahifa"
                       ItemsPerPageLabel="Qatorlar soni: "
                       PageLabel=" sahifa"
                       OfLabel=" dan" />

            </PagerContent>
        </MudTable>
        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Zich</MudSwitch>
            <MudSwitch @bind-Checked="@striped" Color="Color.Success">Yo'l-yo'l</MudSwitch>
            <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Chegara</MudSwitch>
            <MudSpacer />
        </div>

    }
}





@code {
    [Parameter]
    public string? kategoriyaId { get; set; }

    private bool IsNotFound;
    private bool enabled = true;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    public string? errorMessage;
    public string? errorDetails;

    private UsersResult selectedItem1 = null;

    private HashSet<Outlays> selectedItems = new HashSet<Outlays>();
    private Statistics? Element = new Statistics();

    private List<UsersResult>? Elements = new List<UsersResult>();

    private void BackToCategory()
    {
        NavManager.NavigateTo($"/Kategoriya/{Element.CategoryId}");
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await categoryService.ShowStatistics(kategoriyaId);

        if (result.IsSuccess)
        {
            Element = result.Data;
            Elements = Element.UsersResults;
            var index = 0;
            foreach (var el in Elements)
            {
                el.Index = ++index;
            }

        }
        else
        {
            errorMessage = result.ErrorMessage;
            errorDetails = result.ErrorDetails;
            IsNotFound = result.IsNotFound;

            if (errorDetails is not null)
                await SendTelegramMessage.SendTelegram(errorDetails, configuration);
        }
    }

    private bool FilterFunc1(UsersResult element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UsersResult element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


      private bool blockSwitch = false;
    private List<string> editEvents = new();
    private UsersResult elementBeforeEdit;
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;



    public enum TableApplyButtonPosition
    {
        Start,
        End,
        StartAndEnd
    }

    public enum TableEditButtonPosition
    {
        Start,
        End,
        StartAndEnd
    }

    public enum TableEditTrigger
    {
        RowClick,
        EditButton
    }


    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Index = ((UsersResult)element).Index,
                UserName = ((UsersResult)element).UserName,
                ResultMoney = ((UsersResult)element).ResultMoney,

            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((UsersResult)element).Index}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((UsersResult)element).Index} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((UsersResult)element).Index = elementBeforeEdit.Index;
        ((UsersResult)element).UserName = elementBeforeEdit.UserName;
        ((UsersResult)element).ResultMoney = elementBeforeEdit.ResultMoney;

        AddEditionEvent($"RowEditCancel event: Editing of Element {((UsersResult)element).Index} canceled");
    }


}









