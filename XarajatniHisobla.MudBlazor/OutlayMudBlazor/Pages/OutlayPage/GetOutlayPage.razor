@page "/Xarajat/{outlayId}"

@using FluentValidation
@using Newtonsoft.Json;
@using OutlayMudBlazor.Dtoes;
@inject NavigationManager NavManager
@using System.Net.Http.Json
@using System.Net;
@using OutlayMudBlazor.Services;
@inject OutlayService outlayService
@inject HttpClient httpClient

@if (errorMessage is not null)
{
    <div style="display: flex; justify-content: center;">
        <MudAlert Severity="MudBlazor.Severity.Error">@errorMessage</MudAlert>
    </div>
}
else if (IsNotFound)
{
    <div style="text-align: center;">
        <h1>Sahifa topilmadi</h1>

    </div>
}
else
{
    <div style="display: flex; justify-content: center;">
        <div style="width: 40%;">
            <MudCard style="background-color:powderblue;">
                <MudCardContent>
                    <MudText style="text-align: center;" Typo="Typo.h5">@Element?.Name</MudText>
                    <br />
                    <MudText Typo="Typo.body2">Narxi:&nbsp;&nbsp; <span style=" color:black;">@Element.Cost</span></MudText>
                    @if (@Element?.Description is not null)
                    {
                        <MudText Typo="Typo.body2"> Qo'shimcha malumot:&nbsp;&nbsp; <span style="color:black;">@Element?.Description</span></MudText>
                    }

                    <MudText Typo="Typo.body2"> Yaratilgan sana: &nbsp;&nbsp; <span style="color:black;">@Element.CreateAt</span></MudText>

                    @if (Element.LastUpdateAt is not null)
                    {
                        <MudText Typo="Typo.body2"> Oxirgi o'zgartirilgan sana: &nbsp;&nbsp; <span style="color:black;">@Element.LastUpdateAt</span></MudText>
                    }

                </MudCardContent>
                @if (@Element.IsAdmin is true || Element.IsOwner is true)
                {
                    <MudCardActions style="display: flex; justify-content: flex-end;">
                         <div style="margin-right: auto;">
                                <MudIconButton OnClick="(() => BackToCategory())" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" />
                         </div>

                        <div style="margin-left: auto;">
                            <MudIconButton OnClick="(() => GoToUpdateOutlay(outlayId))" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                            <MudIconButton @onclick="async () => await Delete()" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" />
                        </div>
                    </MudCardActions>
                }
                else
                {
                    <MudCardActions style="display: flex; justify-content: flex-end;">
                        <div style="margin-right: auto;">
                            <MudIconButton OnClick="(() => BackToCategory())" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" />
                        </div>
                    </MudCardActions>
                }
            </MudCard>
        </div>
    </div>
}



@code {
    [Parameter]
    public string? outlayId { get; set; }

    private bool IsNotFound;
    private bool enabled = true;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    public string? errorMessage;

    private Outlay? Element = new Outlay();

    protected override async Task OnInitializedAsync()
    {
        var result = await outlayService.GetOutlayAsync(outlayId);

        if (result.IsSuccess)
            Element = result.Data;
        else
        {
            errorMessage = result.ErrorMessage;
            IsNotFound = result.IsNotFound;
        }
    }


    private void GoToUpdateOutlay(string outlayId)
    {
        NavManager.NavigateTo($"/XarajatniO'zgartirish/{outlayId}");
    }


    private void BackToCategory()
    {
        NavManager.NavigateTo($"/Kategoriya/{Element.CategoryId}");
    }


    private async Task Delete()
    {
        var result = await outlayService.DeleteOutlayAsync(outlayId);

        if (result.IsSuccess)
            NavManager.NavigateTo($"/Kategoriya/{Element.CategoryId}");
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }

}








