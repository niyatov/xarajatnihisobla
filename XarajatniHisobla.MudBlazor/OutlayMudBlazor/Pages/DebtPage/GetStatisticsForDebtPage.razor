@page "/StatistikaniKo'rishQarzUchun"

@using FluentValidation
@using Newtonsoft.Json;
@using OutlayMudBlazor.Dtoes;
@inject NavigationManager NavManager
@using System.Net.Http.Json
@using OutlayMudBlazor.Services;
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject DebtService debtService

@if (errorMessage is not null)
{
    <div style="display: flex; justify-content: center;">
        <MudAlert Severity="MudBlazor.Severity.Error">@errorMessage</MudAlert>
    </div>
}
else if (Elements?.Count() is 0)
{
    <div style="text-align: center;">
        <h1>Odamlar mavjud emas</h1>
    </div>
}
else
{
    <div style="display: flex; justify-content: center;">
         <div style="width: 40%;">
            <MudCard style="background-color:powderblue;">
                <MudCardContent>
                    <br />

                       <MudText Typo="Typo.body2"> Jami odamlar soni: &nbsp;&nbsp; <span style="color:black;">@Elements.Count()</span></MudText>

                    @if (Elements.Select(x => x.ResultMoney).Sum() > 0)
                    {
                    <MudText Typo="Typo.body2"> Natijaviy pul miqdori: &nbsp;&nbsp; <span style="color:black;">@(Math.Abs(Elements.Select(x => x.ResultMoney).Sum())) berishingiz kerak</span></MudText>
                    }
                    else if (Elements.Select(x => x.ResultMoney).Sum() < 0)
                    {
                    <MudText Typo="Typo.body2"> Natijaviy pul miqdori: &nbsp;&nbsp; <span style="color:black;">@(Math.Abs(Elements.Select(x => x.ResultMoney).Sum())) olishingiz kerak</span></MudText>
                    }
                    else
                    {
                    <MudText Typo="Typo.body2"> Natijaviy pul miqdori: &nbsp;&nbsp; <span style="color:black;">0 ga teng</span></MudText>
                    }
                
                </MudCardContent>
             
            </MudCard>
         </div>
    </div>

    <br />
    <br />


    <MudTable style="background-color:floralwhite;" Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<DebtStatistics,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
          SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
        <ToolBarContent>
         
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Qidirish" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>


        <ColGroup>


            <col style="width: 1%;" />
                <col style="width: 37%;" />
            <col style="width: 10%;" />
                <col style="width: 22%;" />
                <col style="width: 30%;" />

        </ColGroup>

        <HeaderContent>

            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<DebtStatistics, object>(x=>x.Index)">Tartib raqami</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<DebtStatistics, object>(x=>x.UserName)">Nom</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<DebtStatistics, object>(x=>x.NumberOfDebts)">Qarzlar soni</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;"><MudTableSortLabel SortBy="new Func<DebtStatistics, object>(x=>x.ResultMoney)">Pul miqdori</MudTableSortLabel></MudTh>
            <MudTh style="text-align: center;">Nima qilishi kerakligi</MudTh>

        </HeaderContent>

        <RowTemplate>
            <MudTd>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; @context.Index</MudTd>
            <MudTd>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;@context.UserName</MudTd>
            <MudTd style="text-align: center;">@context.NumberOfDebts</MudTd>
                <MudTd style="text-align: center;">@(Math.Abs(context.ResultMoney))</MudTd>
                @if (context.ResultMoney > 0)
            {
                <MudTd style="text-align: center;"><span style="color:black;">olishi kerak</span></MudTd>
            }
            else if (context.ResultMoney < 0)
            {
                <MudTd style="text-align: center;"><span style="color:black;">berishi kerak</span></MudTd>

            }
            else
            {
                <MudTd><span style="color:black;">hech narsa qilmaydi</span></MudTd>
            }

        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Har bir sahifadagi qatorlar:"
                       FirstPageLabel="Birinchi sahifa"
                       LastPageLabel="So'nggi sahifa"
                       ItemsPerPageLabel="Qatorlar soni: "
                       PageLabel=" sahifa"
                       OfLabel=" dan" />

        </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Zich</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Success">Yo'l-yo'l</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Chegara</MudSwitch>
        <MudSpacer />
    </div>

}


@code {
    private bool enabled = true;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string? errorMessage;
    private string searchString1 = "";
    private DebtStatistics selectedItem1 = null;

    private List<DebtStatistics>? Elements = new List<DebtStatistics>();


    protected override async Task OnInitializedAsync()
    {

        var result = await debtService.ShowResults();

        if (result.IsSuccess)
        {
            Elements = result.Data;
            var index = 0;
            foreach (var el in Elements)
            {
                el.Index = ++index;
            }
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }

    public string UserName { get; set; }
    public int NumbersOfBuyingThings { get; set; }
    public int ResultMoney { get; set; }

    private bool FilterFunc1(DebtStatistics element) => FilterFunc(element, searchString1);

    private bool FilterFunc(DebtStatistics element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private bool blockSwitch = false;
    private List<string> editEvents = new();
    private DebtStatistics elementBeforeEdit;
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;



    public enum TableApplyButtonPosition
    {
        Start,
        End,
        StartAndEnd
    }

    public enum TableEditButtonPosition
    {
        Start,
        End,
        StartAndEnd
    }

    public enum TableEditTrigger
    {
        RowClick,
        EditButton
    }


    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Index = ((DebtStatistics)element).Index,
                UserName = ((DebtStatistics)element).UserName,
                ResultMoney = ((DebtStatistics)element).ResultMoney,
                NumberOfDebts = ((DebtStatistics)element).NumberOfDebts,

            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((DebtStatistics)element).Index}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((DebtStatistics)element).Index} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((DebtStatistics)element).Index = elementBeforeEdit.Index;
        ((DebtStatistics)element).UserName = elementBeforeEdit.UserName;
        ((DebtStatistics)element).ResultMoney = elementBeforeEdit.ResultMoney;
        ((DebtStatistics)element).NumberOfDebts = elementBeforeEdit.NumberOfDebts;

        AddEditionEvent($"RowEditCancel event: Editing of Element {((DebtStatistics)element).Index} canceled");
    }

}









