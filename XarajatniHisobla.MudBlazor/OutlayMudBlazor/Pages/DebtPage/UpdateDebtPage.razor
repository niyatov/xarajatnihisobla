@page "/QarzniO'zgartirish/{debtId}"

@using FluentValidation
@using Newtonsoft.Json;
@using OutlayMudBlazor.Dtoes;
@using OutlayMudBlazor.Services;
@inject NavigationManager NavManager
@inject DebtService debtService

@if (IsNotFound)
{
    <div style="text-align: center;">
        <h1>Bunday xarajat topilmadi</h1>

    </div>
}
else
{
    <div style="display: flex; justify-content: center;">
        <div style="width: 35%;">
            <MudCard style="background-color:floralwhite;">
                <MudForm Model="@model" @ref="@form" Validation="@(updateDebtDtoValidator.ValidateValue)" ValidationDelay="0">
                    <MudCardContent>

                        @if (errorMessage is not null)
                        {
                            <div style="display: flex; justify-content: center;">
                                <MudAlert Severity="MudBlazor.Severity.Error">@errorMessage</MudAlert>
                            </div>
                        }

                        <MudTextField @bind-Value="model.Cost"
                                  For="@(() => model.Cost)"
                                  Immediate="true"
                                  Label="Pulning miqdori" />

                        <MudTextField @bind-Value="model.Description"
                                  For="@(() => model.Description)"
                                  Immediate="true"
                                  Label="Qo'shimcha malumot" />


                        <MudTextField @bind-Value="model.ReceiverName"
                                  For="@(() => model.ReceiverName)"
                                  Immediate="true"
                                  Label="2 - shaxsning nomi" />

                        <MudTextField @bind-Value="model.GivenPersonName"
                                  For="@(() => model.GivenPersonName)"
                                  Immediate="true"
                                  Label="Pul berilishi kerak bo'lgan shaxsning ismi" />

                        <MudTextField @bind-Value="lastAtString" For="@(() => lastAtString)" Label="Qaytarish sanasi" InputType="InputType.Date" />




                    </MudCardContent>
                </MudForm>
                <div style="display: flex; justify-content: center;">
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-1" OnClick="@(async () => await MakeOutlay())">QARZNI O'ZGARTIRISH</MudButton>
                    </MudCardActions>
                </div>

                <br />
            </MudCard>
        </div>
    </div>
}




@code {
    string? errorMessage;
    MudForm? form;
    bool IsNotFound;

    [Parameter]
    public string? debtId { get; set; }

    UpdateDebtDtoFluentValidator updateDebtDtoValidator = new UpdateDebtDtoFluentValidator();

    UpdateDebt model = new UpdateDebt();

    public string? lastAtString;


    private async Task MakeOutlay()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (string.IsNullOrEmpty(model.Description))
                model.Description = null;

            if (lastAtString != "mm-dd-yyyy" && !string.IsNullOrEmpty(lastAtString))
                model.LastAt = DateTime.Parse(lastAtString);
            else
                model.LastAt = null;

            var result = await debtService.UpdateDebtAsync(model,debtId);

            if (result.IsSuccess)
            {
                NavManager.NavigateTo($"/XabarnomalarniKo'rish");
            }
            else
            {
                IsNotFound = result.IsNotFound;
                errorMessage = result.ErrorMessage;
            }
        }
    }



    public class UpdateDebtDtoFluentValidator : AbstractValidator<UpdateDebt>
    {
        public UpdateDebtDtoFluentValidator()
        {
            RuleFor(x => x.ReceiverName)
                 .NotEmpty().WithMessage("2 - shaxsning nomini kiriting")
                 .Length(4, 20).WithMessage("2 - shaxsning nomini kamida 4 va ko'pi bilan 20 belgidan iborat bo'lishi kerak");

            RuleFor(x => x.GivenPersonName)
                .NotEmpty().WithMessage("Pul berilishi kerak bo'lgan shaxsning ismini kiriting")
                .Length(4, 20).WithMessage("Pul berilishi kerak bo'lgan shaxsning ismi kamida 4 va ko'pi bilan 20 belgidan iborat bo'lishi kerak");

            RuleFor(x => x.Description)
                  .Cascade(CascadeMode.StopOnFirstFailure)
                  .Must(ValidateDescription).WithMessage("Malumot kamida 3 va ko'pi bilan 20 belgidan iborat bo'lishi yoki bo'sh qoldirilishi kerak");

            RuleFor(x => x.Cost)
                 .NotEmpty().WithMessage("Pul miqdorini kiriting")
                 .NotEqual(0).WithMessage("Pulning miqdori 0 ga teng bo'la olmaydi");

        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UpdateDebt>.CreateWithOptions((UpdateDebt)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

        private bool ValidateDescription(string description)
        {
            if (string.IsNullOrWhiteSpace(description))
                return true;

            return description.Length >= 3 && description.Length <= 20;
        }
    }
}





